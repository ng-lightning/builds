export function parseDate(date) {
    if (!date) {
        return null;
    }
    return { year: date.getFullYear(), month: date.getMonth(), day: date.getDate() };
}
export function isEqualDate(d1, d2) {
    return d1 && d2 && d1.day === d2.day && d1.month === d2.month && d1.year === d2.year;
}
export function getToday() {
    const today = new Date();
    return { year: today.getFullYear(), month: today.getMonth(), day: today.getDate() };
}
export function numberOfDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
}
// Split array into smaller arrays
export function split(arr, size = 7) {
    const arrays = [];
    while (arr.length > 0) {
        arrays.push(arr.splice(0, size));
    }
    return arrays;
}
export function isDisabled(d, disabledCallback, min, max) {
    const date = new Date(d.year, d.month, d.day);
    return (disabledCallback && disabledCallback(date)) ||
        (min && compareDate(d, min) < 0) ||
        (max && compareDate(d, max) > 0);
}
export function compareDate(d1, d2) {
    if (isEqualDate(d1, d2)) {
        return 0;
    }
    const keys = ['year', 'month', 'day'];
    for (let i = 0; i < 3; i++) {
        const key = keys[i];
        const diff = d1[key] - d2[key];
        if (diff !== 0) {
            return diff > 0 ? 1 : -1;
        }
    }
    return 0;
}
export function isSameMonth(d1, d2) {
    return d1.year === d2.year && d1.month === d2.month;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWxpZ2h0bmluZy9zcmMvbGliL2RhdGVwaWNrZXJzL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFVO0lBQ2xDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQzNCLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO0FBQ25GLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQW1CLEVBQUUsRUFBbUI7SUFDbEUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ3ZGLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUTtJQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO0FBQ3RGLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsSUFBWSxFQUFFLEtBQWE7SUFDN0QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNoRCxDQUFDO0FBRUMsa0NBQWtDO0FBQ3BDLE1BQU0sVUFBVSxLQUFLLENBQUMsR0FBVSxFQUFFLElBQUksR0FBRyxDQUFDO0lBQ3hDLE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztJQUN6QixPQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNsQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLENBQWtCLEVBQUUsZ0JBQXNDLEVBQUUsR0FBb0IsRUFBRSxHQUFvQjtJQUMvSCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxDQUFDLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxDQUFDLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQW1CLEVBQUUsRUFBbUI7SUFDbEUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxPQUFPLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7S0FDRjtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsRUFBbUIsRUFBRSxFQUFtQjtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgTmdsSW50ZXJuYWxEYXRlIHtcbiAgeWVhcjogbnVtYmVyO1xuICBtb250aDogbnVtYmVyO1xuICBkYXk6IG51bWJlcjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGU6IERhdGUpOiBOZ2xJbnRlcm5hbERhdGUge1xuICBpZiAoIWRhdGUpIHsgcmV0dXJuIG51bGw7IH1cbiAgcmV0dXJuIHsgeWVhcjogZGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aDogZGF0ZS5nZXRNb250aCgpLCBkYXk6IGRhdGUuZ2V0RGF0ZSgpIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VxdWFsRGF0ZShkMTogTmdsSW50ZXJuYWxEYXRlLCBkMjogTmdsSW50ZXJuYWxEYXRlKSB7XG4gIHJldHVybiBkMSAmJiBkMiAmJiBkMS5kYXkgPT09IGQyLmRheSAmJiBkMS5tb250aCA9PT0gZDIubW9udGggJiYgZDEueWVhciA9PT0gZDIueWVhcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvZGF5KCk6IE5nbEludGVybmFsRGF0ZSB7XG4gIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgcmV0dXJuIHsgeWVhcjogdG9kYXkuZ2V0RnVsbFllYXIoKSwgbW9udGg6IHRvZGF5LmdldE1vbnRoKCksIGRheTogdG9kYXkuZ2V0RGF0ZSgpIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJPZkRheXNJbk1vbnRoKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlcikge1xuICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCAwKS5nZXREYXRlKCk7XG59XG5cbiAgLy8gU3BsaXQgYXJyYXkgaW50byBzbWFsbGVyIGFycmF5c1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0KGFycjogYW55W10sIHNpemUgPSA3KSB7XG4gIGNvbnN0IGFycmF5czogYW55W10gPSBbXTtcbiAgd2hpbGUgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgYXJyYXlzLnB1c2goYXJyLnNwbGljZSgwLCBzaXplKSk7XG4gIH1cbiAgcmV0dXJuIGFycmF5cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGlzYWJsZWQoZDogTmdsSW50ZXJuYWxEYXRlLCBkaXNhYmxlZENhbGxiYWNrOiAoZDogRGF0ZSkgPT4gYm9vbGVhbiwgbWluOiBOZ2xJbnRlcm5hbERhdGUsIG1heDogTmdsSW50ZXJuYWxEYXRlKTogYm9vbGVhbiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIGQuZGF5KTtcbiAgcmV0dXJuIChkaXNhYmxlZENhbGxiYWNrICYmIGRpc2FibGVkQ2FsbGJhY2soZGF0ZSkpIHx8XG4gICAgKG1pbiAmJiBjb21wYXJlRGF0ZShkLCBtaW4pIDwgMCkgfHxcbiAgICAobWF4ICYmIGNvbXBhcmVEYXRlKGQsIG1heCkgPiAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVEYXRlKGQxOiBOZ2xJbnRlcm5hbERhdGUsIGQyOiBOZ2xJbnRlcm5hbERhdGUpIHtcbiAgaWYgKGlzRXF1YWxEYXRlKGQxLCBkMikpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBrZXlzID0gWyd5ZWFyJywgJ21vbnRoJywgJ2RheSddO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgY29uc3QgZGlmZiA9IGQxW2tleV0gLSBkMltrZXldO1xuICAgIGlmIChkaWZmICE9PSAwKSB7XG4gICAgICByZXR1cm4gZGlmZiA+IDAgPyAxIDogLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lTW9udGgoZDE6IE5nbEludGVybmFsRGF0ZSwgZDI6IE5nbEludGVybmFsRGF0ZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gZDEueWVhciA9PT0gZDIueWVhciAmJiBkMS5tb250aCA9PT0gZDIubW9udGg7XG59XG4iXX0=